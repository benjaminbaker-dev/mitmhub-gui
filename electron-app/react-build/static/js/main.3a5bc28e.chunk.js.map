{"version":3,"sources":["title/titleComponent.jsx","App.js","api/backend_functions.js","network-grid/networkGridComponent.jsx","existing-rules/existingRuleTableComponent.jsx","rule-mgmt/ruleManagerComponent.jsx","tab-bar/tabBarComponent.jsx","requirements-installer/reqInstallComponent.jsx","os-picker/osPickerComponent.jsx","index.js"],"names":["Title","className","Component","ipcRenderer","window","require","App","send","on","event","args","JSON","parse","props","history","push","withRouter","get_nodes","fetch","apiServer","get_tags","mac","req_json","method","headers","body","stringify","start_mitm","stop_mitm","NetworkGrid","state","nodes","selected_node","menu","Item","key","onClick","e","notification","open","then","resp","json","json_data","refreshNodes","catch","setState","this","tags","index","node","div_array","value","Array","node_data","span","overlay","trigger","bordered","style","backgroundColor","marginBottom","preventDefault","SyncOutlined","spin","_generateTagDivs","cards","gutter","rows","_generateCard","_generateRow","length","_generateGrid","size","chooseRender","type","columns","title","dataIndex","ExistingRuleTable","selectedRowKeys","data","onSelectChange","get_active_rules","rule_data","rule_index","deleted_row_index","index_to_remove","splice","rowSelection","onChange","filter_index","remove_rule","removeDeletedRule","dataSource","Option","Select","RuleManager","mac_list","rule_options","selected_rule","params","_updateSelectedNodeAndGetRuleOptions","new_state","_fetchRuleOptions","resetState","get_rule_options","select_list","rule_list","func_name","param_list","description","param","target","defaultValue","width","marginRight","showSearch","onFocus","_generateNodeOptions","_generateRuleOptions","_generateParamInput","shape","filter_name","param_dict","add_rule","TabPane","Tabs","TabBar","defaultActiveKey","tab","ReqInstaller","console","log","os","chooseWarningMessage","OsPicker","to","src","ReactDOM","render","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.3a5bc28e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './title.css';\n\nexport default class Title extends Component {\n    render () {\n        return(\n        <div className=\"title\">\n            <strong>MITM</strong><em>hub</em>\n        </div>\n        )\n    }\n\n}","import React, { Component } from 'react';\n\nimport { withRouter } from \"react-router-dom\";\n\nimport './App.css';\n\nimport Title from './title/titleComponent';\n\n\nconst { ipcRenderer } = window.require(\"electron\");\n\nclass App extends Component {\n  componentDidMount() {\n    ipcRenderer.send('init', 'hello, world')\n    ipcRenderer.on('asynReply', (event, args) => {\n      let response = JSON.parse(args)\n      let are_reqs_installed = response[\"installed\"]\n\n      if (are_reqs_installed) {\n        this.props.history.push(\"/app\")\n      } else {\n        this.props.history.push(\"/setup\")\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"appContainer\">\n        <Title />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App)\n","const apiServer = \"http://localhost:9846/api\"\n\nfunction get_nodes() {\n    const url = apiServer + \"/network\"\n    return fetch(url);\n}\n\nfunction refresh_network() {\n    const url = apiServer + \"/refresh\"\n    return fetch(url)\n}\n\nfunction get_tags(mac) {\n    const url = apiServer + \"/fill_tags\"\n    const req_json = {\"node_id\": mac}\n\n    return fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(req_json)\n    })\n}\n\nfunction get_rule_options(mac) {\n    const url = apiServer + \"/get_rules\"\n    const req_json = {\"node_id\": mac}\n\n    return fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(req_json)\n    })\n}\n\nfunction add_rule(mac, filter_name, param_dict) {\n    const url = apiServer + \"/set_rule\"\n    const req_json = {\n        \"node_id\": mac,\n        \"request\": {\n            [filter_name]: param_dict\n        }\n    }\n\n    return fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(req_json)\n    })\n}\n\nfunction remove_rule(mac, filter_index) {\n    const url = apiServer + \"/remove_rule\"\n    const req_json = {\n        \"node_id\": mac,\n        \"request\": {\n            filter_index: filter_index\n        }\n    }\n    \n    return fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(req_json)\n    })\n}\n\nfunction get_active_rules(mac) {\n    const url = apiServer + \"/get_running_rules\"\n    const req_json = {\n        \"node_id\": mac,\n    }\n\n    return fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(req_json)\n    })\n    \n}\n\nfunction start_mitm(mac) {\n    const url = apiServer + \"/start_mitm\"\n    const req_json = {\n        \"node_id\": mac\n    }\n    \n    return fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(req_json)\n    })\n    \n}\n\nfunction stop_mitm(mac) {\n    const url = apiServer + \"/stop_mitm\"\n    const req_json = {\n        \"node_id\": mac\n    }\n    \n    return fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(req_json)\n    })\n}\n\nexport { \n    get_nodes, \n    refresh_network,\n    get_rule_options, \n    add_rule, \n    remove_rule, \n    get_active_rules, \n    get_tags, \n    start_mitm, \n    stop_mitm \n}","import React, { Component } from \"react\";\nimport { Spin, Menu, Row, Col, Card, Dropdown, Button, notification } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons'\n\nimport \"./menu.css\"\nimport \"./networkGrid.css\"\nimport { get_nodes, refresh_network,  get_tags, start_mitm, stop_mitm } from \"../api/backend_functions\"\n\n\nexport default class NetworkGrid extends Component {\n    state = {\n        nodes: [],\n        selected_node: null\n    }\n\n    menu = (\n        <Menu className=\"menu\">\n            <Menu.Item key=\"0\" className=\"menu-text\"\n                onClick={e => {\n                    notification.open({ \"message\": \"Getting tags\" });\n                    get_tags(this.state.selected_node)\n                        .then(resp => resp.json())\n                        .then(json_data => {\n                            notification.open({ \"message\": json_data[\"status\"] })\n                            this.refreshNodes()\n                        })\n                        .catch(e => {\n                            notification.open({ \"message\": \"Error: \" + e })\n                            this.refreshNodes()\n                        })\n                }}>\n                get tags\n          </Menu.Item>\n            <Menu.Item key=\"1\" className=\"menu-text\"\n                onClick={e => {\n                    notification.open({ \"message\": \"Starting mitm\" })\n                    start_mitm(this.state.selected_node)\n                        .then(resp => resp.json())\n                        .then(json_data => {\n                            notification.open({ \"message\": json_data[\"status\"] })\n                            this.refreshNodes()\n                        })\n                        .catch(e => {\n                            notification.open({ \"message\": \"Error: \" + e })\n                            this.refreshNodes()\n                        })\n                }}>\n                start mitm\n          </Menu.Item>\n            <Menu.Item key=\"3\" className=\"menu-text\"\n                onClick={e => {\n                    notification.open({ \"message\": \"Stopping mitm\" })\n                    stop_mitm(this.state.selected_node)\n                        .then(resp => resp.json())\n                        .then(json_data => {\n                            notification.open({ \"message\": json_data[\"status\"] })\n                            this.refreshNodes()\n                        })\n                        .catch(e => {\n                            notification.open({ \"message\": \"Error: \" + e })\n                            this.refreshNodes()\n                        })\n                }}>\n                stop mitm\n          </Menu.Item>\n        </Menu>\n    );\n    \n    refreshNodes() {\n        get_nodes()\n            .then(resp => resp.json())\n            .then(json_data => this.setState({ nodes: json_data[\"network_nodes\"] }))\n            .catch(e => {\n                this.setState({ nodes: [] })\n            })\n    }\n\n    componentDidMount() {\n        this.refreshNodes()\n    }\n\n    _addTagsToNode(mac, tags) {\n        let nodes = this.state.nodes;\n\n        for (let index in nodes) {\n            let node = nodes[index]\n            if (node[\"mac\"] === mac) {\n                node[\"tags\"] = tags\n                this.setState({ nodes: nodes })\n                return;\n            }\n        }\n    }\n\n    _generateTagDivs(tags) {\n        let div_array = []\n        for (let key in tags) {\n            let value = tags[key]\n\n            if (value instanceof Array) {\n                value = value[0]\n            }\n\n            div_array.push(<div>{key}: {value}</div>)\n        }\n\n        return div_array\n    }\n\n    _generateCard(node_data) {\n        return (\n            <Col span={8}>\n                <Dropdown overlay={this.menu} trigger={['click']} >\n                    <Card bordered={false} style={{ backgroundColor: \"#424242\", marginBottom: \"2vh\" }}\n                        className=\"card-text\"\n                        onClick={e => { e.preventDefault(); this.setState({ selected_node: node_data[\"mac\"] }) }}>\n                        <div>\n                            <strong>{node_data[\"mac\"]} / {node_data[\"ip\"]}</strong> {node_data[\"is_mitm_running\"] && <SyncOutlined spin />}\n                        </div>\n                        <hr className=\"hrChange\" />\n                        {this._generateTagDivs(node_data[\"tags\"])}\n                    </Card>\n                </Dropdown>\n            </Col>\n        )\n    }\n\n    _generateRow(cards) {\n        return (\n            <Row gutter={16}>\n                {cards[0]}\n                {cards[1]}\n                {cards[2]}\n            </Row>\n        )\n    }\n\n\n    _generateGrid() {\n        let rows = []\n        let cards = []\n        let nodes = this.state.nodes\n\n        for (let index in nodes) {\n            cards.push(this._generateCard(nodes[index]))\n            if ((index + 1) % 3 === 0) {\n                rows.push(this._generateRow(cards))\n                cards = []\n            }\n        }\n\n        if (cards) {\n            rows.push(this._generateRow(cards))\n        }\n\n        return rows\n    }\n\n    chooseRender() {\n        if (this.state.nodes.length) {\n            return (<div>\n                        {this._generateGrid()}\n                    </div>)\n\n        } else {\n            this.refreshNodes();\n            return (<Spin size=\"large\" />)\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"site-card-wrapper\">\n                {this.chooseRender()}\n                <br></br>\n                <Button \n                    type=\"primary\" \n                    size='default'\n                    onClick={e => {\n                        notification.open({\"message\": \"Refreshing network\"})\n                        refresh_network()\n                            .then(resp => resp.json())\n                            .then(json_data => {\n                                notification.open({\"message\": json_data[\"status\"]})\n                                this.refreshNodes()\n                            })\n                            .catch(e => {\n                                this.setState({ nodes: []})\n                                notification.open({\"message\": \"Error: \" + e})\n                            })\n                    }}\n                    >refresh</Button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { Table , Button, notification} from 'antd';\n\nimport \"./existingRuleTable.css\"\nimport { get_active_rules, remove_rule } from \"../api/backend_functions\"\n\n\nconst columns = [\n  {\n    title: 'Rule Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Params',\n    dataIndex: 'params',\n    key: 'params',\n  }\n]\n\n\nexport default class ExistingRuleTable extends Component {\n  state = {\n    selectedRowKeys: null,\n    data: []\n  }\n\n  componentDidUpdate() {\n    get_active_rules(this.props.mac)\n      .then(resp => resp.json())\n      .then(json_data => {\n          const rule_data = json_data[\"response\"]\n          let data = []\n\n          for(let rule_index in rule_data) {\n              data.push({\n                \"key\": rule_index, \n                \"index\": rule_index,\n                \"name\": rule_data[rule_index][\"filter_name\"],\n                \"params\": JSON.stringify(rule_data[rule_index][\"filter_args\"])\n              })\n          }\n  \n          if(JSON.stringify(data) !== JSON.stringify(this.state.data)) {\n              this.setState({data: data})\n          }\n\n      })\n  }\n\n  onSelectChange = selectedRowKeys => {\n    this.setState({ selectedRowKeys });\n  };\n\n  removeDeletedRule(deleted_row_index) {\n    let data = this.state.data;\n    let index_to_remove = -1\n\n    for(let index in data) {\n      if(data[index][\"key\"] === deleted_row_index) {\n        index_to_remove = index\n        break;\n      }\n    }\n\n    if(index_to_remove) {\n      data.splice(index_to_remove, 1)\n      this.setState({data: data})\n    }\n  }\n\n  render() {\n    const rowSelection = {\n      selectedRowKeys: this.state.selectedRowKeys,\n      onChange: this.onSelectChange\n    };\n\n    return (\n      <div className=\"table-container\">\n        <Button type=\"primary\" size='large'\n        onClick={e => {\n          if(this.state.selectedRowKeys) {\n            remove_rule(this.props.mac, this.state.selectedRowKeys[0])\n              .then(resp => resp.json())\n              .then(json_data => {\n                  this.removeDeletedRule(this.state.selectedRowKeys[0])\n                  notification.open({\"message\": json_data[\"status\"]})\n            }); \n          } else {\n            notification.open({\"message\": \"Select rule to delete\"})\n          }\n          }}>Delete</Button>\n        <Table\n          rowSelection={rowSelection}\n          dataSource={this.state.data}\n          columns={columns}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./ruleManager.css\"\nimport { get_nodes, get_rule_options, add_rule } from \"../api/backend_functions\"\n\nimport { Select, Button, Input, notification, Spin } from 'antd';\nimport ExistingRuleTable from \"../existing-rules/existingRuleTableComponent\";\n\nconst { Option } = Select;\nconst defaultRule = \"Pick rule\"\n\nexport default class RuleManager extends Component {\n    state = {\n        mac_list: [],\n        selected_node: null,\n        rule_options: null,\n        selected_rule: defaultRule,\n        params: null\n    }\n\n    resetState() {\n        this.setState({\n            mac_list: [],\n            selected_node: null,\n            rule_options: null,\n            selected_rule: defaultRule,\n            params: null\n        })\n    }\n\n    refreshNodes() {\n        get_nodes()\n            .then(resp => resp.json())\n            .then(json_data => {\n                let nodes = json_data[\"network_nodes\"]\n                let mac_list = []\n\n                for (let node of nodes) {\n                    mac_list.push(node[\"mac\"])\n                }\n\n                if(JSON.stringify(this.state.mac_list) !== JSON.stringify(mac_list)) {\n                    this.setState({ mac_list: mac_list })\n                }      \n            })\n            .catch(e => {\n                this.resetState()\n            })\n    }\n    \n    componentDidMount() {\n        this.refreshNodes()\n    }\n\n    _updateSelectedNodeAndGetRuleOptions = (new_state) => {\n        this.setState(new_state, () => { this._fetchRuleOptions() })\n    }\n\n    _fetchRuleOptions() {\n        get_rule_options(this.state.selected_node)\n            .then(resp => resp.json())\n            .then(json_data => {\n                if(JSON.stringify(this.state.rule_options) !== JSON.stringify(json_data[\"response\"])) {\n                    this.setState({ rule_options: json_data[\"response\"] })\n                }\n            })\n            .catch(e => {\n                this.resetState()\n            })\n    }\n\n    _generateNodeOptions() {\n        let select_list = []\n        for (let mac of this.state.mac_list) {\n            select_list.push(<Option value={mac} className=\"menu-text\">{mac}</Option>)\n        }\n        return select_list   \n    }\n\n    _generateRuleOptions() {\n        if (this.state.selected_node && this.state.rule_options) {\n            let rule_list = []\n            for (let func_name in this.state.rule_options) {\n                rule_list.push(<Option value={func_name} className=\"menu-text\">{func_name}</Option>)\n            }\n            return rule_list\n        } else {\n            return []\n        }\n    }\n\n    _generateParamInput() {\n        if (this.state.selected_rule !== defaultRule) {\n            let param_list = []\n            const description = this.state.rule_options[this.state.selected_rule][\"param_explanation\"]\n            \n            param_list.push(\n                <div className=\"param-desc\">\n                    {description}\n                </div>\n            )\n    \n            for (let param of this.state.rule_options[this.state.selected_rule][\"filter_params\"]) {\n                param_list.push(\n                    <div>\n                        <div className=\"param-title\">{param}</div>\n                        <Input onChange={e => this.setState({ ...this.state, params: { ...this.state.params, [param]: e.target.value } })} />\n                        <br />\n                    </div>\n                )\n            }\n            return param_list\n        }\n    }\n\n    chooseRender() {\n        this.refreshNodes();\n        if (this.state.mac_list.length) {\n            return (\n                <div className=\"container\">\n                    <div className=\"subtitle\">\n                        Node and Rule\n                    </div>\n                    <Select\n                        defaultValue=\"Pick node\"\n                        style={{ width: 200, marginRight: \"1vh\" }}\n                        showSearch\n                        onFocus={e => this.refreshNodes()}\n                        onChange={e => { this._updateSelectedNodeAndGetRuleOptions({ selected_node: e, rule_options: null, selected_rule: defaultRule }) }}>\n                        {this._generateNodeOptions()}\n                    </Select>\n                    <Select\n                        style={{ width: 200 }}\n                        value={this.state.selected_rule}\n                        showSearch\n                        onFocus={e => this._fetchRuleOptions()}\n                        onChange={e => this.setState({ selected_rule: e })}>\n                        {this._generateRuleOptions()}\n                    </Select>\n                    <div className=\"subtitle\">\n                        Rule Params\n                    </div>\n                    {this._generateParamInput()}\n                    <div className=\"submit-div\">\n                        <Button type=\"primary\" shape=\"round\" size='large'\n                            onClick={e => {\n                                if (this.state.selected_rule && this.state.params) {\n                                    add_rule(this.state.selected_node, this.state.selected_rule, this.state.params)\n                                        .then(resp => resp.json())\n                                        .then(json_data => {\n                                            if(json_data[\"status\"] === \"Successfully added rule\") {\n                                                this.setState({ rule_options: {}, selected_rule: defaultRule})\n                                            }\n                                            notification.open({ \"message\": json_data[\"status\"] })\n                                        });\n                                } else {\n                                    notification.open({ \"message\": \"Please pick rule and fill params\" })\n                                }\n                            }\n                            }>add rule</Button>\n                    </div>\n                    <ExistingRuleTable mac={this.state.selected_node} />\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"container\">\n                    <Spin size=\"large\" />\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return this.chooseRender()\n    }\n}\n\n","import React, { Component } from \"react\";\nimport { Tabs } from 'antd';\n\nimport \"./tabBar.css\"\nimport NetworkGrid from \"../network-grid/networkGridComponent\";\nimport RuleManager from \"../rule-mgmt/ruleManagerComponent\";\n\nconst { TabPane } = Tabs;\n\nexport default class TabBar extends Component {\n    render () {\n        return(\n            <Tabs defaultActiveKey=\"1\" className=\"tabs\">\n                <TabPane tab=\"Network\" key=\"1\">\n                    <NetworkGrid/>\n                </TabPane>\n                <TabPane tab=\"Rule Management\" key=\"2\">\n                    <RuleManager/>\n                </TabPane>\n          </Tabs>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\nimport { withRouter } from \"react-router-dom\";\nimport { Spin } from 'antd';\n\nimport \"./reqInstall.css\"\n\nconst { ipcRenderer } = window.require(\"electron\");\n\nclass ReqInstaller extends Component {\n    componentDidMount() {\n        console.log(\"mounted\")\n        ipcRenderer.send('setup', this.props.os)\n        ipcRenderer.on('asynReply', (event, args) => {\n            let response = JSON.parse(args)\n            if (response[\"status\"] == \"Success\") {\n                this.props.history.push(\"/app\")\n            } else {\n                this.props.history.push(\"/setup\")\n            }\n        })\n    }\n\n    chooseWarningMessage() {\n        if (this.props.os == \"osx\") {\n            return \"you must have brew, python and pip installed\"\n        }\n        return \"you must have apt-get, python and pip installed\"\n    }\n\n    render() {\n        return (\n            <div className=\"install-container\">\n                <Spin size=\"large\" />\n                <span className=\"install-text\">installing requirements...</span>\n                <br />\n                <span className=\"install-warning\">{this.chooseWarningMessage()}</span>\n            </div>)\n    }\n}\n\nexport default withRouter(ReqInstaller)\n\n","import React, { Component } from \"react\";\nimport {  Link } from \"react-router-dom\";\nimport { Row, Col, Card } from 'antd';\n\nimport \"./osPicker.css\"\n\n\nexport default class OsPicker extends Component {\n    render () {\n        return (      \n        <div className=\"site-card-wrapper\">\n            <Row gutter={16}>\n                <Col span={12}>\n                    <Link to=\"/osx-setup\">\n                    <Card bordered={false} style={{ backgroundColor: \"#424242\"}}>\n                        <img className=\"image\" src={\"https://www.transparentpng.com/download/apple-logo/hRoKDb-apple-logo-transparent.png\"}/>\n                        <div className=\"os-title\">\n                        OSX\n                        </div>\n                    </Card>\n                    </Link>\n                </Col>\n                <Col span={12}>\n                    <Link to=\"/linux-setup\">\n                    <Card bordered={false} style={{ backgroundColor: \"#424242\"}}>\n                        <img className=\"image\" src={\"https://www.transparentpng.com/download/penguin/grap6l-penguin-hd-image.png\"}/>\n                        <div className=\"os-title\">\n                        Linux\n                        </div>\n                    </Card>\n                    </Link>\n                </Col>\n            </Row>\n        </div>)\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Spin } from 'antd';\n\nimport './index.css';\n\nimport App from './App';\nimport TabBar from './tab-bar/tabBarComponent';\nimport ReqInstaller from './requirements-installer/reqInstallComponent';\nimport OsPicker from './os-picker/osPickerComponent';\n\nReactDOM.render(\n    <Router>\n    <App />\n    <div>\n      {/* A <Switch> looks through its children <Route>s and\n      renders the first one that matches the current URL. */}\n      <Switch>\n        <Route exact path=\"/\">\n          <Spin size=\"large\"></Spin>\n        </Route>\n        <Route path=\"/setup\">\n          <OsPicker />\n        </Route>\n        <Route path=\"/osx-setup\">\n          <ReqInstaller os=\"osx\" />\n        </Route>\n        <Route path=\"/linux-setup\">\n          <ReqInstaller os=\"linux\" />\n        </Route>\n        <Route path=\"/app\">\n          <TabBar />\n        </Route>\n      </Switch>\n    </div>\n    </Router>, \n    document.getElementById('root'));\n\n"],"sourceRoot":""}